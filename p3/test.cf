

// var declerations
struct s {
    int sa;
    bool sb;
    void sc;
    struct ss sd;    //cannot use 'id': reserved word
};

int a;
bool b;
void c;
struct s d;


// function w/ params (no struct supported for params)
void func1(int param_a, bool param_b, void param_c) {
    // var decl in func body
    int fa;
    bool fb;
    void fc;
    struct s fd;

    // statements
    a = a;          //assign
    a.b = a.c;      //assign
    a ++;           //inc
    a.b --;         //dec
    cin >> a;       //write
    cout << a.b;    //read
    if (a) { }      //if & ifelse
    if (a) { 
        int a;          //varDeclList
        bool b;
        void c;
        struct s d;
        a = 1 + 2 + b;  //stmtList
        cin>>a;
        cout<<a;
        fc();
        if(a){}
    } else { 
        int a;          //varDeclList
        bool b;
        void c;
        struct s d;
        a = 1 + 2 + b;  //stmtList
        cin>>a;
        cout<<a;
        fc();
        if(a){}
    }
    if(a) { int a; if(a) { int a; if(a) { int a; if(a) { int a; } } } }   //indent

    while(true){    //while loop
        int a;          //varDeclList
        bool b;
        void c;
        struct s d;
        a = 1 + 2 + b;  //stmtList
        cin>>a;
        cout<<a;
        fc();
        if(a){ } else{ if(b){} }
    }
    // return
    return fa;
    return 123456;
    return "123456";
    return true;
    return fc();
    return;
    //func calls
    func();
    func(a, b);
    

    // expressions (in assignExp)
    // exp as terminals:
    a = 1;       //int lit
    a = "";      //string lit
    a = (4);     //paren
    a = true;    //true
    a = false;   //false
    a = a.b;     //loc
    a = fc();    //func call
    // exp as operations:
    a = a+a;
    a = a-a;
    a = a*a;
    a = a/a;
    a = !a;
    a = a&&a;
    a = a||a;
    a = a==a;
    a = a<a;
    a = a>a;
    a = a<=a;
    a = -a;

    // associativity
    a = a + b + c;
    a = a - b - c;
    a = a * b * c;
    a = a / b / c;
    a = a = b;
    a = a.b.c;

    // precedence
    a = a || b && c;
    a = a && b < c;
    a = a < b + c;
    a = a + b * c;
    a = a * -c;
    a = a * -c.d;
    a = a == a && !d || b;
    a = (a == a) && (!d || b);
    a = (a == a && !d) || b;
    a = a <= d.c -1/3;
}

// function w/o params
int func2() {
    int a;
}
