	.data
	.align 2
_g1:	.space 4
	.data
	.align 2
_g2:	.space 4
	.text
_func:
	sw    $ra, 0($sp)	#PUSH
	subu  $sp, $sp, 4
	sw    $fp, 0($sp)	#PUSH
	subu  $sp, $sp, 4
	addu  $fp, $sp, 12	#Set FP
	subu  $sp, $sp, 0	#space for local var
	li    $t0, 1
	sw    $t0, 0($sp)	#PUSH
	subu  $sp, $sp, 4
	lw    $t0, 4($sp)	#POP
	addu  $sp, $sp, 4
	bne   $t0, 1, .L0
	li    $t0, 1
	sw    $t0, 0($sp)	#PUSH
	subu  $sp, $sp, 4
	lw    $v0, 4($sp)	#POP
	addu  $sp, $sp, 4
	j     _funcRet
	b     .L1
.L0:
	li    $t0, 2
	sw    $t0, 0($sp)	#PUSH
	subu  $sp, $sp, 4
	lw    $v0, 4($sp)	#POP
	addu  $sp, $sp, 4
	j     _funcRet
.L1:
	nop
	j     _funcRet
_funcRet:
	lw    $ra, -4($fp)	#Restore RA
	move  $t0, $fp		#Save callee's fp
	lw    $fp, -8($fp)	#Restore caller's FP
	move  $sp, $t0		#Restore caller's SP
	jr    $ra		#Return
	.text
	.globl main
main:
	sw    $ra, 0($sp)	#PUSH
	subu  $sp, $sp, 4
	sw    $fp, 0($sp)	#PUSH
	subu  $sp, $sp, 4
	addu  $fp, $sp, 8	#Set FP
	subu  $sp, $sp, 0	#space for local var
#Write Stmt Begins. Evaluate Exp:
	li    $t0, 1
	sw    $t0, 0($sp)	#PUSH
	subu  $sp, $sp, 4
	jal   _func
	sw    $v0, 0($sp)	#PUSH
	subu  $sp, $sp, 4
#Put value to register and syscall
	lw    $a0, 4($sp)	#POP
	addu  $sp, $sp, 4
	li    $v0, 1
	syscall
#Write Stmt Over.
	j     _mainRet
_mainRet:
	lw    $ra, 0($fp)	#Restore RA
	move  $t0, $fp		#Save callee's fp
	lw    $fp, -4($fp)	#Restore caller's FP
	move  $sp, $t0		#Restore caller's SP
	jr    $ra		#Return
