	.data
	.align 2
_g1:	.space 4
	.data
	.align 2
_g2:	.space 4
	.data
	.align 2
_t:	.space 4
	.data
	.align 2
_b:	.space 4
	.text
_f:
	sw    $ra, 0($sp)	#PUSH
	subu  $sp, $sp, 4
	sw    $fp, 0($sp)	#PUSH
	subu  $sp, $sp, 4
	addu  $fp, $sp, 12	#Set FP
	subu  $sp, $sp, 0	#space for local var
#ID codegen Start
	lw    $t0, 0($fp)
	sw    $t0, 0($sp)	#PUSH
	subu  $sp, $sp, 4
#ID codegen End
	lw    $v0, 4($sp)	#POP
	addu  $sp, $sp, 4
	j     _fRet
	j     _fRet
_fRet:
	lw    $ra, -4($fp)	#Restore RA
	move  $t0, $fp		#Save callee's fp
	lw    $fp, -8($fp)	#Restore caller's FP
	move  $sp, $t0		#Restore caller's SP
	jr    $ra		#Return
	.text
_g:
	sw    $ra, 0($sp)	#PUSH
	subu  $sp, $sp, 4
	sw    $fp, 0($sp)	#PUSH
	subu  $sp, $sp, 4
	addu  $fp, $sp, 8	#Set FP
	subu  $sp, $sp, 0	#space for local var
#Write Stmt Begins. Evaluate Exp:
	.data
.L0:	.asciiz"g done\n"
	.text
	la    $t0, .L0
	sw    $t0, 0($sp)	#PUSH
	subu  $sp, $sp, 4
#Put value to register and syscall
	lw    $a0, 4($sp)	#POP
	addu  $sp, $sp, 4
	li    $v0, 4
	syscall
#Write Stmt Over.
	j     _gRet
_gRet:
	lw    $ra, 0($fp)	#Restore RA
	move  $t0, $fp		#Save callee's fp
	lw    $fp, -4($fp)	#Restore caller's FP
	move  $sp, $t0		#Restore caller's SP
	jr    $ra		#Return
	.text
_h:
	sw    $ra, 0($sp)	#PUSH
	subu  $sp, $sp, 4
	sw    $fp, 0($sp)	#PUSH
	subu  $sp, $sp, 4
	addu  $fp, $sp, 12	#Set FP
	subu  $sp, $sp, 0	#space for local var
#Binary Exp Start
#ID codegen Start
	lw    $t0, 0($fp)
	sw    $t0, 0($sp)	#PUSH
	subu  $sp, $sp, 4
#ID codegen End
	li    $t0, 1
	sw    $t0, 0($sp)	#PUSH
	subu  $sp, $sp, 4
	lw    $t1, 4($sp)	#POP
	addu  $sp, $sp, 4
	lw    $t0, 4($sp)	#POP
	addu  $sp, $sp, 4
	beq   $t0, $t1, .L1
	li    $t0, 0
	b     .L2
.L1:
	li    $t0, 1
.L2:
	sw    $t0, 0($sp)	#PUSH
	subu  $sp, $sp, 4
#Binary Exp End
	lw    $v0, 4($sp)	#POP
	addu  $sp, $sp, 4
	j     _hRet
	j     _hRet
_hRet:
	lw    $ra, -4($fp)	#Restore RA
	move  $t0, $fp		#Save callee's fp
	lw    $fp, -8($fp)	#Restore caller's FP
	move  $sp, $t0		#Restore caller's SP
	jr    $ra		#Return
	.text
_i:
	sw    $ra, 0($sp)	#PUSH
	subu  $sp, $sp, 4
	sw    $fp, 0($sp)	#PUSH
	subu  $sp, $sp, 4
	addu  $fp, $sp, 8	#Set FP
	subu  $sp, $sp, 0	#space for local var
	li    $t0, 1
	sw    $t0, 0($sp)	#PUSH
	subu  $sp, $sp, 4
	lw    $v0, 4($sp)	#POP
	addu  $sp, $sp, 4
	j     _iRet
	j     _iRet
_iRet:
	lw    $ra, 0($fp)	#Restore RA
	move  $t0, $fp		#Save callee's fp
	lw    $fp, -4($fp)	#Restore caller's FP
	move  $sp, $t0		#Restore caller's SP
	jr    $ra		#Return
	.text
_j:
	sw    $ra, 0($sp)	#PUSH
	subu  $sp, $sp, 4
	sw    $fp, 0($sp)	#PUSH
	subu  $sp, $sp, 4
	addu  $fp, $sp, 16	#Set FP
	subu  $sp, $sp, 0	#space for local var
#Write Stmt Begins. Evaluate Exp:
#ID codegen Start
	lw    $t0, 0($fp)
	sw    $t0, 0($sp)	#PUSH
	subu  $sp, $sp, 4
#ID codegen End
#Put value to register and syscall
	lw    $a0, 4($sp)	#POP
	addu  $sp, $sp, 4
	li    $v0, 1
	syscall
#Write Stmt Over.
#Write Stmt Begins. Evaluate Exp:
	.data
.L3:	.asciiz"\n"
	.text
	la    $t0, .L3
	sw    $t0, 0($sp)	#PUSH
	subu  $sp, $sp, 4
#Put value to register and syscall
	lw    $a0, 4($sp)	#POP
	addu  $sp, $sp, 4
	li    $v0, 4
	syscall
#Write Stmt Over.
#Write Stmt Begins. Evaluate Exp:
#ID codegen Start
	lw    $t0, -4($fp)
	sw    $t0, 0($sp)	#PUSH
	subu  $sp, $sp, 4
#ID codegen End
#Put value to register and syscall
	lw    $a0, 4($sp)	#POP
	addu  $sp, $sp, 4
	li    $v0, 1
	syscall
#Write Stmt Over.
#Write Stmt Begins. Evaluate Exp:
	.text
	la    $t0, .L3
	sw    $t0, 0($sp)	#PUSH
	subu  $sp, $sp, 4
#Put value to register and syscall
	lw    $a0, 4($sp)	#POP
	addu  $sp, $sp, 4
	li    $v0, 4
	syscall
#Write Stmt Over.
#Write Stmt Begins. Evaluate Exp:
	.data
.L4:	.asciiz"j done\n"
	.text
	la    $t0, .L4
	sw    $t0, 0($sp)	#PUSH
	subu  $sp, $sp, 4
#Put value to register and syscall
	lw    $a0, 4($sp)	#POP
	addu  $sp, $sp, 4
	li    $v0, 4
	syscall
#Write Stmt Over.
	j     _jRet
_jRet:
	lw    $ra, -8($fp)	#Restore RA
	move  $t0, $fp		#Save callee's fp
	lw    $fp, -12($fp)	#Restore caller's FP
	move  $sp, $t0		#Restore caller's SP
	jr    $ra		#Return
	.text
	.globl main
main:
	sw    $ra, 0($sp)	#PUSH
	subu  $sp, $sp, 4
	sw    $fp, 0($sp)	#PUSH
	subu  $sp, $sp, 4
	addu  $fp, $sp, 8	#Set FP
	subu  $sp, $sp, 4	#space for local var
#Write Stmt Begins. Evaluate Exp:
	.data
.L5:	.asciiz"hello world!\n"
	.text
	la    $t0, .L5
	sw    $t0, 0($sp)	#PUSH
	subu  $sp, $sp, 4
#Put value to register and syscall
	lw    $a0, 4($sp)	#POP
	addu  $sp, $sp, 4
	li    $v0, 4
	syscall
#Write Stmt Over.
#AssignStmt Start
#Assign exp Start
	jal   _i
	sw    $v0, 0($sp)	#PUSH
	subu  $sp, $sp, 4
	#global variable
	la    $t0, _b
	sw    $t0, 0($sp)	#PUSH
	subu  $sp, $sp, 4
	lw    $t1, 4($sp)	#POP
	addu  $sp, $sp, 4
	lw    $t0, 4($sp)	#POP
	addu  $sp, $sp, 4
	sw    $t0, 0($t1)
	sw    $t0, 0($sp)	#PUSH
	subu  $sp, $sp, 4
#Assign exp End
	lw    $t0, 4($sp)	#POP
	addu  $sp, $sp, 4
#AssignStmt End
#Write Stmt Begins. Evaluate Exp:
#ID codegen Start
	lw    $t0, _b
	sw    $t0, 0($sp)	#PUSH
	subu  $sp, $sp, 4
#ID codegen End
#Put value to register and syscall
	lw    $a0, 4($sp)	#POP
	addu  $sp, $sp, 4
	li    $v0, 1
	syscall
#Write Stmt Over.
#Write Stmt Begins. Evaluate Exp:
	.data
.L6:	.asciiz"end\n"
	.text
	la    $t0, .L6
	sw    $t0, 0($sp)	#PUSH
	subu  $sp, $sp, 4
#Put value to register and syscall
	lw    $a0, 4($sp)	#POP
	addu  $sp, $sp, 4
	li    $v0, 4
	syscall
#Write Stmt Over.
	j     _mainRet
_mainRet:
	lw    $ra, 0($fp)	#Restore RA
	move  $t0, $fp		#Save callee's fp
	lw    $fp, -4($fp)	#Restore caller's FP
	move  $sp, $t0		#Restore caller's SP
	jr    $ra		#Return
