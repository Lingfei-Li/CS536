import java_cup.runtime.*; // defines the Symbol class
import java.lang.reflect.Field;

// The generated scanner will return a Symbol for each token that it finds.
// A Symbol contains an Object field named value; that field will be of type
// TokenVal, defined below.
//
// A TokenVal object contains the line number on which the token occurs as
// well as the number of the character on that line that starts the token.
// Some tokens (literals and IDs) also include the value of the token.

class TokenVal {
  // fields
    int linenum;
    int charnum;
  // constructor
    TokenVal(int line, int ch) {
        linenum = line;
        charnum = ch;
    }
}

class IntLitTokenVal extends TokenVal {
  // new field: the value of the integer literal
    int intVal;
  // constructor
    IntLitTokenVal(int line, int ch, int val) {
        super(line, ch);
        intVal = val;
    }
}

class IdTokenVal extends TokenVal {
  // new field: the value of the identifier
    String idVal;
  // constructor
    IdTokenVal(int line, int ch, String val) {
        super(line, ch);
    idVal = val;
    }
}

class StrLitTokenVal extends TokenVal {
  // new field: the value of the string literal
    String strVal;
  // constructor
    StrLitTokenVal(int line, int ch, String val) {
        super(line, ch);
        strVal = val;
    }
}

// The following class is used to keep track of the character number at which
// the current token starts on its line.
class CharNum {
    static int num=1;
}

// The following class helps reduce duplicated codes for operators 
// (e.g. plus, minus)
class OperatorTokenVal {
    static Symbol makeSymbol(String yytext, int yyline, int symVal) {
        Symbol S = new Symbol(symVal, new TokenVal(yyline+1, CharNum.num));
        CharNum.num += yytext.length();
        return S;
    }
}


%%

DIGIT=          [0-9]
LETTER=         [a-zA-Z]
LETTER_UNDERSCORE= [a-zA-Z_]
LETTER_UNDERSCORE_DIGIT= [a-zA-Z_0-9]
STRINGCHAR=     ((\\[nt'\"\?\\])|[^\n\"\\])
BAD_STRINGCHAR= \\[^nt'\"\?\\]
WHITESPACE=     [\040\t]
RESERVED =      (bool|int|void|true|false|struct|cin|cout|if|else|while|return)

%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

%eofval{
return new Symbol(sym.EOF);
%eofval}

%line

%%

(//|#)[^\n]*\n   {
            // comments
            return null;
}


{RESERVED}  { 
            // reserved keywords
            int symToken = 0;      //default: EOF
            try {
                // Convert the word to uppercase to match symbol token type
                Field field = sym.class.getField(yytext().toUpperCase());
                symToken = field.getInt(null);
            }catch(NoSuchFieldException|IllegalAccessException e) {
                ErrMsg.fatal(yyline+1, CharNum.num, e.getMessage());
            }

            Symbol S = new Symbol(symToken, new IdTokenVal(yyline + 1, CharNum.num, yytext()));
            CharNum.num += yytext().length();
            return S;
}


{LETTER_UNDERSCORE}{LETTER_UNDERSCORE_DIGIT}* {
            // identifiers
            Symbol S = new Symbol(sym.ID, new IdTokenVal(yyline+1, CharNum.num, yytext()) );
            CharNum.num += yytext().length();
            return S;
}

{DIGIT}+  { 
            // integer literals
            int val = 0;
            Symbol S;
            try {
                val = Integer.parseInt(yytext());
                S = new Symbol(sym.INTLITERAL,
                                 new IntLitTokenVal(yyline+1, CharNum.num, val));
            }           
            catch(NumberFormatException e) {
                ErrMsg.warn(yyline+1, CharNum.num, "integer literal too large; using max value");
                S = new Symbol(sym.INTLITERAL,
                                 new IntLitTokenVal(yyline+1, CharNum.num, Integer.MAX_VALUE));
            }
            CharNum.num += yytext().length();
            return S;
}

\"{STRINGCHAR}*$ {
            // unterminated string
            ErrMsg.fatal(yyline+1, CharNum.num, "unterminated string literal ignored");
            CharNum.num = 1;
            return null;
}

\"{STRINGCHAR}*\" {
            // string
            Symbol S = new Symbol(sym.STRINGLITERAL,
                             new StrLitTokenVal(yyline+1, CharNum.num, yytext()));
            CharNum.num += yytext().length();
            return S;
}

\"({STRINGCHAR}|{BAD_STRINGCHAR})*$ {
            // bad unterminated string. need to be placed after good string or the regex will fail 
            ErrMsg.fatal(yyline+1, CharNum.num, "unterminated string literal with bad escaped character ignored");
            CharNum.num = 1;
            return null;
}

\"({STRINGCHAR}|{BAD_STRINGCHAR})*\" {
            // bad string. need to be placed after good string or the regex will fail 
            ErrMsg.fatal(yyline+1, CharNum.num, "string literal with bad escaped character ignored");
            CharNum.num += yytext().length();
            return null;
}

"{"       { 
            int symVal = sym.LCURLY;
            return OperatorTokenVal.makeSymbol(yytext(), yyline, symVal);
          }
"}"       { 
            int symVal = sym.RCURLY;
            return OperatorTokenVal.makeSymbol(yytext(), yyline, symVal);
          }
"("       { 
            int symVal = sym.LPAREN;
            return OperatorTokenVal.makeSymbol(yytext(), yyline, symVal);
          }
")"       { 
            int symVal = sym.RPAREN;
            return OperatorTokenVal.makeSymbol(yytext(), yyline, symVal);
          }
";"       { 
            int symVal = sym.SEMICOLON;
            return OperatorTokenVal.makeSymbol(yytext(), yyline, symVal);
          }
","       { 
            int symVal = sym.COMMA;
            return OperatorTokenVal.makeSymbol(yytext(), yyline, symVal);
          }
"."       { 
            int symVal = sym.DOT;
            return OperatorTokenVal.makeSymbol(yytext(), yyline, symVal);
          }
"<<"       { 
            int symVal = sym.WRITE;
            return OperatorTokenVal.makeSymbol(yytext(), yyline, symVal);
          }
">>"       { 
            int symVal = sym.READ;
            return OperatorTokenVal.makeSymbol(yytext(), yyline, symVal);
          }
"++"       { 
            int symVal = sym.PLUSPLUS;
            return OperatorTokenVal.makeSymbol(yytext(), yyline, symVal);
          }
"--"       { 
            int symVal = sym.MINUSMINUS;
            return OperatorTokenVal.makeSymbol(yytext(), yyline, symVal);
          }
"+"       { 
            int symVal = sym.PLUS;
            return OperatorTokenVal.makeSymbol(yytext(), yyline, symVal);
          }
"-"       { 
            int symVal = sym.MINUS;
            return OperatorTokenVal.makeSymbol(yytext(), yyline, symVal);
          }
"*"       { 
            int symVal = sym.TIMES;
            return OperatorTokenVal.makeSymbol(yytext(), yyline, symVal);
          }
"/"       { 
            int symVal = sym.DIVIDE;
            return OperatorTokenVal.makeSymbol(yytext(), yyline, symVal);
          }
"!"       { 
            int symVal = sym.NOT;
            return OperatorTokenVal.makeSymbol(yytext(), yyline, symVal);
          }
"&&"       { 
            int symVal = sym.AND;
            return OperatorTokenVal.makeSymbol(yytext(), yyline, symVal);
          }
"||"       { 
            int symVal = sym.OR;
            return OperatorTokenVal.makeSymbol(yytext(), yyline, symVal);
          }
"=="       { 
            int symVal = sym.EQUALS;
            return OperatorTokenVal.makeSymbol(yytext(), yyline, symVal);
          }
"!="       { 
            int symVal = sym.NOTEQUALS;
            return OperatorTokenVal.makeSymbol(yytext(), yyline, symVal);
          }
"<"       { 
            int symVal = sym.LESS;
            return OperatorTokenVal.makeSymbol(yytext(), yyline, symVal);
          }
">"       { 
            int symVal = sym.GREATER;
            return OperatorTokenVal.makeSymbol(yytext(), yyline, symVal);
          }
"<="       { 
            int symVal = sym.LESSEQ;
            return OperatorTokenVal.makeSymbol(yytext(), yyline, symVal);
          }
">="       { 
            int symVal = sym.GREATEREQ;
            return OperatorTokenVal.makeSymbol(yytext(), yyline, symVal);
          }
"="       { 
            int symVal = sym.ASSIGN;
            return OperatorTokenVal.makeSymbol(yytext(), yyline, symVal);
          }

\n        { CharNum.num = 1; }

{WHITESPACE}+  { CharNum.num += yytext().length(); }

.         { ErrMsg.fatal(yyline+1, CharNum.num,
                         "illegal character ignored: " + yytext());
            CharNum.num += yytext().length();
          }
